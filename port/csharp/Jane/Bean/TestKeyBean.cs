// This file is generated by genbeans tool. DO NOT EDIT!
using System;
using System.Text;
using System.Collections.Generic;

namespace Jane.Bean
{
	/**
	 * 作为key或配置的bean;
	 */
	[Serializable]
	public sealed class TestKeyBean : IBean, IEquatable<TestKeyBean>, IComparable<TestKeyBean>
	{
		public const int BEAN_TYPE = 0;
		public int Serial { get; set; }

		private /*  1*/ int key1; // KEY-1;
		private /*  2*/ string key2; // KEY-2;

		public TestKeyBean()
		{
		}

		public TestKeyBean(int key1, string key2)
		{
			this.key1 = key1;
			this.key2 = key2 ?? string.Empty;
		}

		public void Reset()
		{
			throw new NotSupportedException();
		}

		public int GetKey1()
		{
			return key1;
		}

		public string GetKey2()
		{
			return key2;
		}

		public int Type()
		{
			return BEAN_TYPE;
		}

		public int InitSize()
		{
			return 16;
		}

		public int MaxSize()
		{
			return 2147483647;
		}

		public void Init()
		{
			key2 = string.Empty;
		}

		public static TestKeyBean Create()
		{
			TestKeyBean b = new TestKeyBean();
			b.Init();
			return b;
		}

		public static IBean CreateIBean()
		{
			IBean b = new TestKeyBean();
			b.Init();
			return b;
		}

		public Octets Marshal(Octets s)
		{
			if (this.key1 != 0) s.Marshal1((byte)0x04).Marshal(this.key1);
			if (!string.IsNullOrEmpty(this.key2)) s.Marshal1((byte)0x09).Marshal(this.key2);
			return s.Marshal1((byte)0);
		}

		public OctetsStream Unmarshal(OctetsStream s)
		{
			throw new NotSupportedException();
		}

		public object Clone()
		{
			return new TestKeyBean(key1, key2);
		}

		public override int GetHashCode()
		{
			int h = unchecked(0 * (int)0x9e3779b1);
			h = h * 16777619 + this.key1;
			h = h * 16777619 + this.key2.GetHashCode();
			return h;
		}

		public bool Equals(TestKeyBean b)
		{
			if (this.key1 != b.key1) return false;
			if (!this.key2.Equals(b.key2)) return false;
			return true;
		}

		public override bool Equals(object o)
		{
			if (!(o is TestKeyBean)) return false;
			TestKeyBean b = (TestKeyBean)o;
			if (this.key1 != b.key1) return false;
			if (!this.key2.Equals(b.key2)) return false;
			return true;
		}

		public static bool operator==(TestKeyBean a, TestKeyBean b)
		{
			return a.Equals(b);
		}

		public static bool operator!=(TestKeyBean a, TestKeyBean b)
		{
			return !a.Equals(b);
		}

		public int CompareTo(TestKeyBean b)
		{
			int c;
			c = this.key1.CompareTo(b.key1); if (c != 0) return c;
			c = this.key2.CompareTo(b.key2); if (c != 0) return c;
			return 0;
		}

		public int CompareTo(IBean b)
		{
			return b is TestKeyBean ? CompareTo((TestKeyBean)b) : 1;
		}

		public int CompareTo(object b)
		{
			return b is IBean ? CompareTo((IBean)b) : 1;
		}

		public override string ToString()
		{
			StringBuilder s = new StringBuilder(16 + 16 * 2).Append('{');
			s.Append(this.key1).Append(',');
			s.Append(this.key2).Append(',');
			--s.Length;
			return s.Append('}').ToString();
		}
#if TO_JSON_LUA
		public StringBuilder ToJson(StringBuilder s)
		{
			if (s == null) s = new StringBuilder(1024);
			s.Append('{');
			s.Append("\"key1\":").Append(this.key1).Append(',');
			if (this.key2 != null) Util.ToJStr(s.Append("\"key2\":"), this.key2).Append(',');
			--s.Length;
			return s.Append('}');
		}

		public StringBuilder ToJson()
		{
			return ToJson(null);
		}

		public StringBuilder ToLua(StringBuilder s)
		{
			if (s == null) s = new StringBuilder(1024);
			s.Append('{');
			s.Append("key1=").Append(this.key1).Append(',');
			if (this.key2 != null) Util.ToJStr(s.Append("key2="), this.key2).Append(',');
			--s.Length;
			return s.Append('}');
		}

		public StringBuilder ToLua()
		{
			return ToLua(null);
		}
#endif
	}
}
