// This file is generated by genbeans tool. DO NOT EDIT! @formatter:off
package jane.bean;

import jane.core.Bean;
import jane.core.MarshalException;
import jane.core.Octets;
import jane.core.OctetsStream;

/**
 * 作为key或配置的bean
 */
@SuppressWarnings({"RedundantIfStatement", "RedundantSuppression", "SwitchStatementWithTooFewBranches", "UnnecessaryLocalVariable"})
public final class TestKeyBean extends Bean<TestKeyBean>
{
	private static final long serialVersionUID = 0xbeac0364a4241981L;
	public  static final int BEAN_TYPE = 0;
	public  static final String BEAN_TYPENAME = TestKeyBean.class.getSimpleName();
	public  static final TestKeyBean BEAN_STUB = new TestKeyBean();

	private /*  1*/ int key1; // KEY-1
	private /*  2*/ String key2; // KEY-2

	public TestKeyBean()
	{
		key2 = "";
	}

	public TestKeyBean(int key1, String key2)
	{
		this.key1 = key1;
		this.key2 = (key2 != null ? key2 : "");
	}

	@Deprecated
	@Override
	public void reset()
	{
		throw new UnsupportedOperationException();
	}

	/** @return KEY-1 */
	public int getKey1()
	{
		return key1;
	}

	/** @return KEY-2 */
	public String getKey2()
	{
		return key2;
	}

	@Override
	public int type()
	{
		return BEAN_TYPE;
	}

	@Override
	public String typeName()
	{
		return BEAN_TYPENAME;
	}

	@Override
	public TestKeyBean stub()
	{
		return BEAN_STUB;
	}

	@Override
	public TestKeyBean create()
	{
		return new TestKeyBean();
	}

	@Override
	public int initSize()
	{
		return 16;
	}

	@Override
	public int maxSize()
	{
		return 2147483647;
	}

	@Override
	public Octets marshal(Octets _s_)
	{
		if(this.key1 != 0) _s_.marshal1((byte)0x04).marshal(this.key1);
		if(!this.key2.isEmpty()) _s_.marshal1((byte)0x09).marshal(this.key2);
		return _s_.marshalZero();
	}

	@Deprecated
	@Override
	public OctetsStream unmarshal(OctetsStream _s_) throws MarshalException
	{
		for (;;) { int _i_ = _s_.unmarshalInt1(), _t_ = _i_ & 3; if ((_i_ >>= 2) == 63) _i_ += _s_.unmarshalInt1(); switch(_i_)
		{
			case 0: return _s_;
			case 1: this.key1 = _s_.unmarshalInt(_t_); break;
			case 2: this.key2 = _s_.unmarshalString(_t_); break;
			default: _s_.unmarshalSkipVar(_t_);
		}}
	}

	@Override
	public TestKeyBean clone()
	{
		return new TestKeyBean(key1, key2);
	}

	@Override
	public int hashCode()
	{
		int _h_ = (int)serialVersionUID;
		_h_ = _h_ * 16777619 + this.key1;
		_h_ = _h_ * 16777619 + this.key2.hashCode();
		return _h_;
	}

	@Override
	public boolean equals(Object _o_)
	{
		if (_o_ == this) return true;
		if (!(_o_ instanceof TestKeyBean)) return false;
		TestKeyBean _b_ = (TestKeyBean)_o_;
		if (this.key1 != _b_.key1) return false;
		if (!this.key2.equals(_b_.key2)) return false;
		return true;
	}

	@Override
	public int compareTo(TestKeyBean _b_)
	{
		if (_b_ == this) return 0;
		if (_b_ == null) return 1;
		int _c_;
		_c_ = Integer.compare(this.key1, _b_.key1); if (_c_ != 0) return _c_;
		_c_ = this.key2.compareTo(_b_.key2); if (_c_ != 0) return _c_;
		return 0;
	}

	@Override
	public StringBuilder toStringBuilder(StringBuilder _s_)
	{
		_s_.append('{');
		_s_.append(this.key1).append(',');
		_s_.append(this.key2);
		return _s_.append('}');
	}
}
